"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[396],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>u,MDXProvider:()=>c,mdx:()=>x,useMDXComponents:()=>p,withMDXComponents:()=>d});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},l.apply(this,arguments)}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=a.createContext({}),d=function(e){return function(t){var r=p(t.components);return a.createElement(e,l({},t,{components:r}))}},p=function(e){var t=a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(r),c=n,g=d["".concat(o,".").concat(c)]||d[c]||m[c]||l;return r?a.createElement(g,i(i({ref:t},u),{},{components:r})):a.createElement(g,i({ref:t},u))}));function x(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,o=new Array(l);o[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[g]="string"==typeof e?e:n,o[1]=i;for(var u=2;u<l;u++)o[u]=r[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},37726:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var a=r(87462),n=(r(67294),r(3905));const l={id:"aqueryctx"},o="aqueryctx type",i={unversionedId:"api/bxl/aqueryctx",id:"api/bxl/aqueryctx",title:"aqueryctx type",description:"The context for performing aquery operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within aquery command.",source:"@site/../docs/api/bxl/aqueryctx.generated.md",sourceDirName:"api/bxl",slug:"/api/bxl/aqueryctx",permalink:"/docs/api/bxl/aqueryctx",draft:!1,tags:[],version:"current",frontMatter:{id:"aqueryctx"},sidebar:"manualSidebar",previous:{title:"anon_targets type",permalink:"/docs/api/bxl/anon_targets"},next:{title:"artifact type",permalink:"/docs/api/bxl/artifact"}},s={},u=[{value:"aqueryctx.all_actions",id:"aqueryctxall_actions",level:2},{value:"aqueryctx.all_outputs",id:"aqueryctxall_outputs",level:2},{value:"aqueryctx.attrfilter",id:"aqueryctxattrfilter",level:2},{value:"aqueryctx.deps",id:"aqueryctxdeps",level:2},{value:"aqueryctx.eval",id:"aqueryctxeval",level:2}],d={toc:u};function p(e){let{components:t,...r}=e;return(0,n.mdx)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.mdx)("h1",{id:"aqueryctx-type"},(0,n.mdx)("inlineCode",{parentName:"h1"},"aqueryctx")," type"),(0,n.mdx)("p",null,"The context for performing ",(0,n.mdx)("inlineCode",{parentName:"p"},"aquery")," operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within aquery command."),(0,n.mdx)("p",null,"Query results are ",(0,n.mdx)("inlineCode",{parentName:"p"},"target_set"),"s of ",(0,n.mdx)("inlineCode",{parentName:"p"},"action_query_node"),"s, which supports iteration,\nindexing, ",(0,n.mdx)("inlineCode",{parentName:"p"},"len()"),", set addition/subtraction, and ",(0,n.mdx)("inlineCode",{parentName:"p"},"equals()"),"."),(0,n.mdx)("h2",{id:"aqueryctxall_actions"},"aqueryctx.all","_","actions"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"def aqueryctx.all_actions(\n    targets: configured_target_label | label | providers_label | str | target_label | target_node | target_set | target_set | target_set | target_set | unconfigured_target_node | list[action_query_node | configured_target_label | label | providers_label | str | target_label | target_node | unconfigured_target_node]\n) -> target_set\n")),(0,n.mdx)("p",null,"Obtain all the actions declared within the analysis of a given target."),(0,n.mdx)("p",null,"This operation only makes sense on a target literal (it is a simple passthrough when passed\nan action)."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"aqueryctxall_outputs"},"aqueryctx.all","_","outputs"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"def aqueryctx.all_outputs(\n    targets: configured_target_label | label | providers_label | str | target_label | target_node | target_set | target_set | target_set | target_set | unconfigured_target_node | list[action_query_node | configured_target_label | label | providers_label | str | target_label | target_node | unconfigured_target_node]\n) -> target_set\n")),(0,n.mdx)("p",null,"Obtain the actions for all the outputs provided by the ",(0,n.mdx)("inlineCode",{parentName:"p"},"DefaultInfo")," for the targets passed as input. This includes both the ",(0,n.mdx)("inlineCode",{parentName:"p"},"default_outputs")," and ",(0,n.mdx)("inlineCode",{parentName:"p"},"other_outputs"),"."),(0,n.mdx)("p",null,"This operation only makes sense on a target literal (it does nothing if passed something\nelse)."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"aqueryctxattrfilter"},"aqueryctx.attrfilter"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"def aqueryctx.attrfilter(\n    attr: str,\n    value: str,\n    targets: configured_target_label | label | providers_label | str | target_label | target_node | target_set | target_set | target_set | target_set | unconfigured_target_node | list[action_query_node | configured_target_label | label | providers_label | str | target_label | target_node | unconfigured_target_node]\n) -> target_set\n")),(0,n.mdx)("p",null,"The attrfilter query for rule attribute filtering."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"aqueryctxdeps"},"aqueryctx.deps"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"def aqueryctx.deps(\n    universe: configured_target_label | label | providers_label | str | target_label | target_node | target_set | target_set | target_set | target_set | unconfigured_target_node | list[action_query_node | configured_target_label | label | providers_label | str | target_label | target_node | unconfigured_target_node],\n    depth: None | int = None,\n    filter: None | str = None\n) -> target_set\n")),(0,n.mdx)("p",null,"The deps query for finding the transitive closure of dependencies."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"aqueryctxeval"},"aqueryctx.eval"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"def aqueryctx.eval(query: str, query_args: None | target_set | list[str] = None)\n")),(0,n.mdx)("p",null,"Evaluates some general query string. ",(0,n.mdx)("inlineCode",{parentName:"p"},"query_args")," can be a target_set of unconfigured nodes, or a list of strings. Returns a ",(0,n.mdx)("inlineCode",{parentName:"p"},"dict")," of target labels mapped to their ",(0,n.mdx)("inlineCode",{parentName:"p"},"target_set")," results if ",(0,n.mdx)("inlineCode",{parentName:"p"},"query_args")," was passed in, otherwise returns a single ",(0,n.mdx)("inlineCode",{parentName:"p"},"target_set"),"."),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_eval(ctx):\n    result = ctx.aquery().eval(":foo")\n    ctx.output.print(result)\n')))}p.isMDXComponent=!0}}]);