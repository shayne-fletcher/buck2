"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5587],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>o,MDXProvider:()=>g,mdx:()=>f,useMDXComponents:()=>s,withMDXComponents:()=>c});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},l.apply(this,arguments)}function u(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function d(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?u(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),c=function(e){return function(t){var r=s(t.components);return n.createElement(e,l({},t,{components:r}))}},s=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):d(d({},t),e)),r},g=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},p="mdxType",_={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},x=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),c=s(r),g=a,p=c["".concat(u,".").concat(g)]||c[g]||_[g]||l;return r?n.createElement(p,d(d({ref:t},o),{},{components:r})):n.createElement(p,d({ref:t},o))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,u=new Array(l);u[0]=x;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d[p]="string"==typeof e?e:a,u[1]=d;for(var o=2;o<l;o++)u[o]=r[o];return n.createElement.apply(null,u)}return n.createElement.apply(null,r)}x.displayName="MDXCreateElement"},3859:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>u,default:()=>s,frontMatter:()=>l,metadata:()=>d,toc:()=>o});var n=r(87462),a=(r(67294),r(3905));const l={id:"cqueryctx"},u="cqueryctx type",d={unversionedId:"api/bxl/cqueryctx",id:"api/bxl/cqueryctx",title:"cqueryctx type",description:"The context for performing cquery operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within cquery command.",source:"@site/../docs/api/bxl/cqueryctx.generated.md",sourceDirName:"api/bxl",slug:"/api/bxl/cqueryctx",permalink:"/docs/api/bxl/cqueryctx",draft:!1,tags:[],version:"current",frontMatter:{id:"cqueryctx"},sidebar:"manualSidebar",previous:{title:"context type",permalink:"/docs/api/bxl/context"},next:{title:"dependency type",permalink:"/docs/api/bxl/dependency"}},i={},o=[{value:"cqueryctx.allpaths",id:"cqueryctxallpaths",level:2},{value:"cqueryctx.attrfilter",id:"cqueryctxattrfilter",level:2},{value:"cqueryctx.attrregexfilter",id:"cqueryctxattrregexfilter",level:2},{value:"cqueryctx.buildfile",id:"cqueryctxbuildfile",level:2},{value:"cqueryctx.deps",id:"cqueryctxdeps",level:2},{value:"cqueryctx.eval",id:"cqueryctxeval",level:2},{value:"cqueryctx.filter",id:"cqueryctxfilter",level:2},{value:"cqueryctx.inputs",id:"cqueryctxinputs",level:2},{value:"cqueryctx.kind",id:"cqueryctxkind",level:2},{value:"cqueryctx.owner",id:"cqueryctxowner",level:2},{value:"cqueryctx.rdeps",id:"cqueryctxrdeps",level:2},{value:"cqueryctx.somepath",id:"cqueryctxsomepath",level:2},{value:"cqueryctx.testsof",id:"cqueryctxtestsof",level:2},{value:"cqueryctx.testsof_with_default_target_platform",id:"cqueryctxtestsof_with_default_target_platform",level:2}],c={toc:o};function s(e){let{components:t,...r}=e;return(0,a.mdx)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"cqueryctx-type"},(0,a.mdx)("inlineCode",{parentName:"h1"},"cqueryctx")," type"),(0,a.mdx)("p",null,"The context for performing ",(0,a.mdx)("inlineCode",{parentName:"p"},"cquery")," operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within cquery command."),(0,a.mdx)("p",null,"Query results are ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_set"),"s of ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_node"),"s, which supports iteration,\nindexing, ",(0,a.mdx)("inlineCode",{parentName:"p"},"len()"),", set addition/subtraction, and ",(0,a.mdx)("inlineCode",{parentName:"p"},"equals()"),"."),(0,a.mdx)("h2",{id:"cqueryctxallpaths"},"cqueryctx.allpaths"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def cqueryctx.allpaths(\n    from: configured_target_label | str | target_label | target_node | target_set | target_set | unconfigured_target_node | list[configured_target_label | str | target_label | target_node | unconfigured_target_node],\n    to: configured_target_label | str | target_label | target_node | target_set | target_set | unconfigured_target_node | list[configured_target_label | str | target_label | target_node | unconfigured_target_node]\n) -> target_set\n")),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},"allpaths")," query for computing all dependency paths."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"cqueryctxattrfilter"},"cqueryctx.attrfilter"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def cqueryctx.attrfilter(\n    attr: str,\n    value: str,\n    targets: configured_target_label | str | target_label | target_node | target_set | target_set | unconfigured_target_node | list[configured_target_label | str | target_label | target_node | unconfigured_target_node]\n) -> target_set\n")),(0,a.mdx)("p",null,"The attrfilter query for rule attribute filtering."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"cqueryctxattrregexfilter"},"cqueryctx.attrregexfilter"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def cqueryctx.attrregexfilter(\n    attribute: str,\n    value: str,\n    targets: configured_target_label | str | target_label | target_node | target_set | target_set | unconfigured_target_node | list[configured_target_label | str | target_label | target_node | unconfigured_target_node]\n) -> target_set\n")),(0,a.mdx)("p",null,"The attrregexfilter query for rule attribute filtering with regex."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_attrregexfilter(ctx):\n    filtered = ctx.cquery().attrregexfilter("foo", "he.lo", "bin/kind/...")\n    ctx.output.print(filtered)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"cqueryctxbuildfile"},"cqueryctx.buildfile"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def cqueryctx.buildfile(\n    targets: configured_target_label | str | target_label | target_node | target_set | target_set | unconfigured_target_node | list[configured_target_label | str | target_label | target_node | unconfigured_target_node]\n) -> file_set\n")),(0,a.mdx)("p",null,"Find the build file(s) that defines a target or a target set."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _buildfile_impl(ctx):\n    owner = ctx.cquery().owner(["bin/TARGET", "bin/kind"])\n    result = ctx.cquery().buildfile(owner)\n    ctx.output.print(result)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"cqueryctxdeps"},"cqueryctx.deps"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def cqueryctx.deps(\n    universe: configured_target_label | str | target_label | target_node | target_set | target_set | unconfigured_target_node | list[configured_target_label | str | target_label | target_node | unconfigured_target_node],\n    depth: None | int = None,\n    filter: None | str = None\n) -> target_set\n")),(0,a.mdx)("p",null,"The deps query for finding the transitive closure of dependencies."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_deps(ctx):\n    result = ctx.cquery().deps("root//bin:the_binary", 1)\n    ctx.output.print(result)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"cqueryctxeval"},"cqueryctx.eval"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def cqueryctx.eval(\n    query: str,\n    query_args: None | target_set | list[str] = None,\n    target_universe: None | list[str] | tuple[str, ...] = None\n)\n")),(0,a.mdx)("p",null,"Evaluates some general query string. ",(0,a.mdx)("inlineCode",{parentName:"p"},"query_args")," can be a target_set of unconfigured nodes, or a list of strings. Returns a ",(0,a.mdx)("inlineCode",{parentName:"p"},"dict")," of target labels mapped to their ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_set")," results if ",(0,a.mdx)("inlineCode",{parentName:"p"},"query_args")," was passed in, otherwise returns a single ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_set"),"."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_eval(ctx):\n    result1 = ctx.cquery().eval("inputs(root//bin:the_binary)")\n    ctx.output.print(result1)\n\n    result2 = ctx.cquery().eval("inputs(%s)", query_args = ["cell//path/to/file:target"])\n    ctx.output.print(result2)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"cqueryctxfilter"},"cqueryctx.filter"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def cqueryctx.filter(\n    regex: str,\n    targets: configured_target_label | str | target_label | target_node | target_set | target_set | unconfigured_target_node | list[configured_target_label | str | target_label | target_node | unconfigured_target_node]\n) -> target_set\n")),(0,a.mdx)("p",null,"The filter query for filtering targets by name."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_filter(ctx):\n    result = ctx.cquery().filter(".*the_binary", "root//...")\n    ctx.output.print(result)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"cqueryctxinputs"},"cqueryctx.inputs"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def cqueryctx.inputs(\n    targets: configured_target_label | str | target_label | target_node | target_set | target_set | unconfigured_target_node | list[configured_target_label | str | target_label | target_node | unconfigured_target_node]\n) -> file_set\n")),(0,a.mdx)("p",null,"The inputs query for finding input files."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_inputs(ctx):\n    result = ctx.cquery().inputs("root//bin:the_binary")\n    ctx.output.print(result)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"cqueryctxkind"},"cqueryctx.kind"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def cqueryctx.kind(\n    regex: str,\n    targets: configured_target_label | str | target_label | target_node | target_set | target_set | unconfigured_target_node | list[configured_target_label | str | target_label | target_node | unconfigured_target_node]\n) -> target_set\n")),(0,a.mdx)("p",null,"The kind query for filtering targets by rule type."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_kind(ctx):\n    kind = ctx.cquery().kind(".*1", "bin/kind/...")\n    ctx.output.print(kind)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"cqueryctxowner"},"cqueryctx.owner"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def cqueryctx.owner(\n    files: file_set | str | list[str] | tuple[str, ...],\n    universe: None | configured_target_label | str | target_label | target_node | target_set | target_set | unconfigured_target_node | list[configured_target_label | str | target_label | target_node | unconfigured_target_node] = None\n) -> target_set\n")),(0,a.mdx)("p",null,"The owner query for finding targets that own specified files. Note that if you do not pass in a cell path (where the format is ",(0,a.mdx)("inlineCode",{parentName:"p"},"<cell>//path/to/file"),"), the path is resolved against the cell that the BXL script lives in. If you need to evaluate a file path that lives in a different cell, you must pass in the fully qualified cell path."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _owner_impl(ctx):\n    owner = ctx.cquery().owner("bin/TARGETS.fixture", "foo//target/universe/...")\n    ctx.output.print(owner)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"cqueryctxrdeps"},"cqueryctx.rdeps"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def cqueryctx.rdeps(\n    universe: configured_target_label | str | target_label | target_node | target_set | target_set | unconfigured_target_node | list[configured_target_label | str | target_label | target_node | unconfigured_target_node],\n    from: configured_target_label | str | target_label | target_node | target_set | target_set | unconfigured_target_node | list[configured_target_label | str | target_label | target_node | unconfigured_target_node],\n    depth: int = _\n) -> target_set\n")),(0,a.mdx)("p",null,"The rdeps query for finding the transitive closure of reverse dependencies."),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_rdeps(ctx):\n    result = ctx.cquery().rdeps("root//bin:the_binary", "//lib:file1", 100)\n    ctx.output.print(result)\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"cqueryctxsomepath"},"cqueryctx.somepath"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def cqueryctx.somepath(\n    from: configured_target_label | str | target_label | target_node | target_set | target_set | unconfigured_target_node | list[configured_target_label | str | target_label | target_node | unconfigured_target_node],\n    to: configured_target_label | str | target_label | target_node | target_set | target_set | unconfigured_target_node | list[configured_target_label | str | target_label | target_node | unconfigured_target_node]\n) -> target_set\n")),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"cqueryctxtestsof"},"cqueryctx.testsof"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def cqueryctx.testsof(\n    targets: configured_target_label | str | target_label | target_node | target_set | target_set | unconfigured_target_node | list[configured_target_label | str | target_label | target_node | unconfigured_target_node]\n) -> target_set\n")),(0,a.mdx)("p",null,"The testsof query for listing the tests of the specified targets."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"cqueryctxtestsof_with_default_target_platform"},"cqueryctx.testsof","_","with","_","default","_","target","_","platform"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def cqueryctx.testsof_with_default_target_platform(\n    targets: configured_target_label | str | target_label | target_node | target_set | target_set | unconfigured_target_node | list[configured_target_label | str | target_label | target_node | unconfigured_target_node]\n) -> target_set\n")),(0,a.mdx)("p",null,"The testsof query for listing the tests of the specified targets. Performs default target platform resolution under the hood for the tests found."))}s.isMDXComponent=!0}}]);