"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1608],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>c,MDXProvider:()=>d,mdx:()=>h,useMDXComponents:()=>s,withMDXComponents:()=>p});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){return function(t){var n=s(t.components);return a.createElement(e,o({},t,{components:n}))}},s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},x=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=s(n),d=r,m=p["".concat(i,".").concat(d)]||p[d]||f[d]||o;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=x;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}x.displayName="MDXCreateElement"},5418:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={id:"audit_ctx"},i="audit_ctx type",l={unversionedId:"api/bxl/audit_ctx",id:"api/bxl/audit_ctx",title:"audit_ctx type",description:"The context for performing audit operations in bxl. The functions offered on this ctx are the same behaviour as the audit functions available within audit command.",source:"@site/../docs/api/bxl/audit_ctx.generated.md",sourceDirName:"api/bxl",slug:"/api/bxl/audit_ctx",permalink:"/docs/api/bxl/audit_ctx",draft:!1,tags:[],version:"current",frontMatter:{id:"audit_ctx"},sidebar:"manualSidebar",previous:{title:"attrs type",permalink:"/docs/api/bxl/attrs"},next:{title:"buck_regex type",permalink:"/docs/api/bxl/buck_regex"}},u={},c=[{value:"audit_ctx.cell",id:"audit_ctxcell",level:2},{value:"audit_ctx.output",id:"audit_ctxoutput",level:2}],p={toc:c};function s(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"audit_ctx-type"},(0,r.mdx)("inlineCode",{parentName:"h1"},"audit_ctx")," type"),(0,r.mdx)("p",null,"The context for performing ",(0,r.mdx)("inlineCode",{parentName:"p"},"audit")," operations in bxl. The functions offered on this ctx are the same behaviour as the audit functions available within audit command."),(0,r.mdx)("h2",{id:"audit_ctxcell"},"audit","_","ctx.cell"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"def audit_ctx.cell(\n    aliases_to_resolve: list[str] | tuple[str, ...] = [],\n    *,\n    aliases: bool = False\n) -> dict[str, str]\n")),(0,r.mdx)("p",null,"Query information about the ","[cells]"," list in .buckconfig."),(0,r.mdx)("p",null,"Takes the following parameters:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"aliases_to_resolve")," - list of cell aliases to query. These aliases will be resolved in the root cell of the BXL script."),(0,r.mdx)("li",{parentName:"ul"},"optional ",(0,r.mdx)("inlineCode",{parentName:"li"},"aliases")," flag - if enabled, and no explicit aliases are passed, will query for all aliases in the root cell of the BXL script.")),(0,r.mdx)("p",null,"Returns a dict of cell name to absolute path mappings."),(0,r.mdx)("p",null,"Sample usage:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},"def _impl_audit_cell(ctx):\n    result = ctx.audit().cell(aliases = True)\n    ctx.output.print(result)\n")),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"audit_ctxoutput"},"audit","_","ctx.output"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"def audit_ctx.output(\n    output_path: str,\n    target_platform: None | str | target_label = _\n)\n")),(0,r.mdx)("p",null,"Returns either: - The ",(0,r.mdx)("inlineCode",{parentName:"p"},"action")," which created the buck-out path, if exists. - The ",(0,r.mdx)("inlineCode",{parentName:"p"},"unconfigured_target_label")," constructed from the buck-out path, if the configuration hashes do not match. - None, if the configuration hash of the buck-out path matches the one passed into this function, or the default target configuration, but no action could be found that generated the buck-out path."),(0,r.mdx)("p",null,"Takes in an optional target platform, otherwise will use the default target platform."),(0,r.mdx)("p",null,"Sample usage:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_audit_output(ctx):\n    target_platform = "foo"\n    result = ctx.audit().output("buck-out/v2/gen/fbcode/some_cfg_hash/path/to/__target__/artifact", target_platform)\n    ctx.output.print(result)\n')))}s.isMDXComponent=!0}}]);